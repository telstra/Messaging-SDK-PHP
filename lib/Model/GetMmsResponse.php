<?php
/**
 * GetMmsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Telstra_Messaging
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telstra Messaging API
 *
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Telstra_Messaging\Model;

use \ArrayAccess;
use \Telstra_Messaging\ObjectSerializer;

/**
 * GetMmsResponse Class Doc Comment
 *
 * @category Class
 * @package  Telstra_Messaging
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GetMmsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetMmsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'destination_address' => 'string',
        'sender_address' => 'string',
        'subject' => 'string',
        'message_id' => 'string',
        'api_msg_id' => 'string',
        'sent_timestamp' => 'string',
        'mms_content' => '\Telstra_Messaging\Model\MMSContent[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'status' => null,
        'destination_address' => null,
        'sender_address' => null,
        'subject' => null,
        'message_id' => null,
        'api_msg_id' => null,
        'sent_timestamp' => null,
        'mms_content' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'destination_address' => 'destinationAddress',
        'sender_address' => 'senderAddress',
        'subject' => 'subject',
        'message_id' => 'messageId',
        'api_msg_id' => 'apiMsgId',
        'sent_timestamp' => 'sentTimestamp',
        'mms_content' => 'MMSContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'destination_address' => 'setDestinationAddress',
        'sender_address' => 'setSenderAddress',
        'subject' => 'setSubject',
        'message_id' => 'setMessageId',
        'api_msg_id' => 'setApiMsgId',
        'sent_timestamp' => 'setSentTimestamp',
        'mms_content' => 'setMmsContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'destination_address' => 'getDestinationAddress',
        'sender_address' => 'getSenderAddress',
        'subject' => 'getSubject',
        'message_id' => 'getMessageId',
        'api_msg_id' => 'getApiMsgId',
        'sent_timestamp' => 'getSentTimestamp',
        'mms_content' => 'getMmsContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['destination_address'] = isset($data['destination_address']) ? $data['destination_address'] : null;
        $this->container['sender_address'] = isset($data['sender_address']) ? $data['sender_address'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message_id'] = isset($data['message_id']) ? $data['message_id'] : null;
        $this->container['api_msg_id'] = isset($data['api_msg_id']) ? $data['api_msg_id'] : null;
        $this->container['sent_timestamp'] = isset($data['sent_timestamp']) ? $data['sent_timestamp'] : null;
        $this->container['mms_content'] = isset($data['mms_content']) ? $data['mms_content'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['destination_address'] === null) {
            $invalidProperties[] = "'destination_address' can't be null";
        }
        if ($this->container['sender_address'] === null) {
            $invalidProperties[] = "'sender_address' can't be null";
        }
        if ($this->container['sent_timestamp'] === null) {
            $invalidProperties[] = "'sent_timestamp' can't be null";
        }
        if ($this->container['mms_content'] === null) {
            $invalidProperties[] = "'mms_content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The final state of the message.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets destination_address
     *
     * @return string
     */
    public function getDestinationAddress()
    {
        return $this->container['destination_address'];
    }

    /**
     * Sets destination_address
     *
     * @param string $destination_address The number the message was sent to.
     *
     * @return $this
     */
    public function setDestinationAddress($destination_address)
    {
        $this->container['destination_address'] = $destination_address;

        return $this;
    }

    /**
     * Gets sender_address
     *
     * @return string
     */
    public function getSenderAddress()
    {
        return $this->container['sender_address'];
    }

    /**
     * Sets sender_address
     *
     * @param string $sender_address The number the message was sent from.
     *
     * @return $this
     */
    public function setSenderAddress($sender_address)
    {
        $this->container['sender_address'] = $sender_address;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject The subject assigned to the message.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message_id
     *
     * @return string|null
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param string|null $message_id Message Id assigned by the MMSC.
     *
     * @return $this
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets api_msg_id
     *
     * @return string|null
     */
    public function getApiMsgId()
    {
        return $this->container['api_msg_id'];
    }

    /**
     * Sets api_msg_id
     *
     * @param string|null $api_msg_id Message Id assigned by the API.
     *
     * @return $this
     */
    public function setApiMsgId($api_msg_id)
    {
        $this->container['api_msg_id'] = $api_msg_id;

        return $this;
    }

    /**
     * Gets sent_timestamp
     *
     * @return string
     */
    public function getSentTimestamp()
    {
        return $this->container['sent_timestamp'];
    }

    /**
     * Sets sent_timestamp
     *
     * @param string $sent_timestamp Time handling of the message ended.
     *
     * @return $this
     */
    public function setSentTimestamp($sent_timestamp)
    {
        $this->container['sent_timestamp'] = $sent_timestamp;

        return $this;
    }

    /**
     * Gets mms_content
     *
     * @return \Telstra_Messaging\Model\MMSContent[]
     */
    public function getMmsContent()
    {
        return $this->container['mms_content'];
    }

    /**
     * Sets mms_content
     *
     * @param \Telstra_Messaging\Model\MMSContent[] $mms_content An array of content that was received in an MMS message.
     *
     * @return $this
     */
    public function setMmsContent($mms_content)
    {
        $this->container['mms_content'] = $mms_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


